resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:

- name: bbr-release-pivnet
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: p-bosh-backup-and-restore
    product-version: ^1\.5\..*$


- name: bbr-director-backup-bucket
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.bbr-backup))
    regexp: ((foundation))-director-backup_(.*).tar
    skip_ssl_verification: true


- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 4\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true


- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true

- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.installation))
    regexp: ((foundation))-installation-(.*).zip
    skip_ssl_verification: true


## used for manual trigger serial jobs using manual version controls.
- name: pipeline-trigger-version-git
  type: semver
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch)) # should create this branch inadvance
    file: envs/((foundation))/pipeline-trigger-manage-platform # will create if not exists
    private_key:  ((git.private_key))

- name: pipelines
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: ((git.platform_automation_pipelines.branch))
    skip_ssl_verification: true  

- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true  

- name: opsman_vm_state
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true
    paths: [ "envs/((foundation))/state/state.yml" ]

## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: opsman-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    private_key: ((git.private_key))
    config_file: envs/((foundation))/versions.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"


credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_SECRET: ((credhub_client.password))
    CREDHUB_CLIENT: ((credhub_client.username))
    CREDHUB_SERVER: ((credhub.server))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: envs/((foundation))
    SKIP_MISSING: false


prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
    VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks


prepare-tasks-with-product-version: &prepare-tasks-with-product-version
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: opsman-version-git
    vars: configuration
  params:
    CONFIG_PATHS: config # semver-config-resource auto-generates folder for semver-config.yml.
    VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks



prepare-custom-tasks-with-secrets: &prepare-custom-tasks-with-secrets
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
    VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
    TASKS_PATH: tasks/tasks
  output_mapping:
    tasks: pipelines



## injects params from 'semver-config.yaml' to task files
prepare-custom-tasks-with-product-version: &prepare-custom-tasks-with-product-version
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    vars: configuration
    config: opsman-version-git 
  params:
    CONFIG_PATHS: config # semver-config-resource auto-generates folder for semver-config.yml.
    VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
    TASKS_PATH: tasks/tasks # only for pipelines tasks
  output_mapping:
    tasks: platform-automation-tasks

opsman-state-make-commit: &opsman-state-make-commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: configuration
    file-source: generated-state
  output_mapping:
    repository-commit: configuration-commit
  params:
    FILE_SOURCE_PATH: state.yml
    FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
    GIT_AUTHOR_EMAIL: ((git.user.email))
    GIT_AUTHOR_NAME: ((git.user.username))
    COMMIT_MESSAGE: "Update from upgrade-opsman"
    
stage-configure-apply: &stage-configure-apply
  image: platform-automation-image
  file: platform-automation-tasks/tasks/stage-configure-apply.yml
  input_mapping:
    product: downloaded-product
    env: configuration
    config: configuration
  params:
    #CONFIG_FILE: envs/((foundation))/products/pks.yml
    ENV_FILE: envs/((foundation))/opsman/env.yml
    #VARS_FILES: config/envs/((foundation))/vars/pks.yml

echo-files: &echo-files
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: ubuntu
    inputs:
    - name: files
    params:
      FILE: 
    run:
      path: bash
      args:
      - -exc
      - |
        cat $FILE

