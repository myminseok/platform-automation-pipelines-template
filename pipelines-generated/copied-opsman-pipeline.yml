## to list up job name list from this file.
## sed -n '/^jobs:/,/^resource_types:/p' ./opsman-pipeline.yml | grep  "\- name" | sed 's/- name:/  -/g'

groups:
- name: opsman
  jobs:
  - manual-trigger-install-opsman
  - install-opsman
  - authenticate-opsman
  - configure-director
  - apply-director-changes
  - configure-director-only
  - upgrade-opsman
  - apply-director-changes-after-upgrade-opsman
  - delete-opsman-vm-only
  - delete-installation-from-opsman

resource_types:

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: notify-slack
  type: docker-image
  source:
    repository: cfcommunity/notify-slack-resource
    tag: latest

resources:

- name: slack
  type: slack-notification
  icon: slack
  source:
    url: ((slack-webhook-url))

- name: trigger-install-opsman-git
  type: semver
  icon: github
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    file: foundations/((foundation))/trigger-install-opsman
    initial_version: 0.0.1
    private_key: ((git.private_key))

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 5\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_files))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_files))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true

- name: pipelines
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: ((git.platform_automation_pipelines.branch))
    skip_ssl_verification: true

- name: opsman-vm-state
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true
    paths:
    - foundations/((foundation))/opsman/state.yml

- name: opsman-version-git
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true
    paths:
    - foundations/((foundation))/versions/opsman.yml

prepare-custom-tasks-with-secrets: &prepare-custom-tasks-with-secrets
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    config: pipelines
    vars: pipelines
  params:
    TASKS_PATH: tasks/tasks
    CONFIG_PATHS: config/foundations/((foundation))/opsman config/foundations/((foundation))/products
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: pipelines

prepare-tasks-with-opsman-secrets: &prepare-tasks-with-opsman-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: pipelines
    vars: pipelines
  params:
    CONFIG_PATHS: config/foundations/((foundation))/opsman config/foundations/((foundation))/versions
    VARS_PATHS: vars/foundations/((foundation))/vars 
  output_mapping:
    tasks: platform-automation-tasks

make-commit-opsman-state_and_put: &make-commit-opsman-state_and_put
  do:
  - task: make-commit-opsman-state
    image: platform-automation-image
    file: platform-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: pipelines
      file-source: generated-state
    output_mapping:
      repository-commit: generated-commit-repo
    params:
      FILE_SOURCE_PATH: state.yml
      FILE_DESTINATION_PATH: foundations/((foundation))/opsman/state.yml
      GIT_AUTHOR_EMAIL: ((git.user.email))
      GIT_AUTHOR_NAME: ((git.user.username))
      COMMIT_MESSAGE: Update from upgrade-opsman
  - put: pipelines
    params:
      repository: generated-commit-repo
      merge: true

notify-slack: &notify-slack
  on_success:
    put: slack
    params:
      text: |
        "[SUCCESS] ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}"
        "${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
  on_failure:
    put: slack
    params:
      text: |
        "[FAILURE] ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}"
        "${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
  on_error:
    put: slack
    params:
      text: |
        "[ERROR] ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}"
        "${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"
jobs:


- name: manual-trigger-install-opsman
  plan:
    - put: trigger-install-opsman-git
      params: {bump: patch}
  <<: *notify-slack


- name: install-opsman
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 100
  plan:
  - in_parallel:
    - get: trigger-install-opsman-git
      trigger: true
      passed: [manual-trigger-install-opsman]
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
    - get: opsman-vm-state
    - get: opsman-version-git

  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    
    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git
        vars: pipelines
      params:
        CONFIG_FILE: foundations/((foundation))/versions/opsman.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: s3
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: downloaded-product
        config: pipelines
        vars: pipelines
        state: pipelines
      params:
        OPSMAN_CONFIG_FILE: foundations/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/foundations/((foundation))/vars/opsman.yml
        STATE_FILE: foundations/((foundation))/opsman/state.yml
      on_success:
        <<: *make-commit-opsman-state_and_put

- name: authenticate-opsman
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 100
  plan:
  - in_parallel:
    - get: trigger-install-opsman-git
      trigger: true
      passed: [install-opsman]
    - get: opsman-version-git
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:

    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      attempts: 10
      input_mapping:
        env: pipelines
        config: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
        AUTH_CONFIG_FILE: foundations/((foundation))/opsman/auth.yml

- name: configure-director
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 100
  plan:
  - in_parallel:
    - get: trigger-install-opsman-git
      trigger: true
      passed: [authenticate-opsman]
    - get: opsman-version-git
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: pipelines
        config: pipelines
        vars: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: foundations/((foundation))/opsman/director.yml
        VARS_FILES: vars/foundations/((foundation))/vars/director.yml


- name: apply-director-changes
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 100
  plan:
  - in_parallel:
    - get: trigger-install-opsman-git
      trigger: false
      passed: [configure-director]
    - get: opsman-version-git
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
  <<: *notify-slack


- name: configure-director-only
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 100
  plan:
  - in_parallel:
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: pipelines
        config: pipelines
        vars: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: foundations/((foundation))/opsman/director.yml
        VARS_FILES: vars/foundations/((foundation))/vars/director.yml

- name: upgrade-opsman
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 1000
  plan:
  - in_parallel:
    - get: opsman-version-git
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
    - get: opsman-vm-state
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git
        vars: pipelines
      params:
        CONFIG_FILE: foundations/((foundation))/versions/opsman.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: s3
    - task: export-installation-locally
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
    - put: opsman-backup-bucket
      params:
        file: installation/((foundation))-installation*.zip
    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: downloaded-product
        state: pipelines
        config: pipelines
        env: pipelines
        vars: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
        STATE_FILE: foundations/((foundation))/opsman/state.yml
        INSTALLATION_FILE: ((foundation))-installation*.zip
        OPSMAN_CONFIG_FILE: foundations/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/foundations/((foundation))/vars/opsman.yml
      ensure:
        <<: *make-commit-opsman-state_and_put

- name: apply-director-changes-after-upgrade-opsman
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 100
  plan:
  - in_parallel:
    - get: opsman-version-git
      passed:
      - upgrade-opsman
      trigger: false
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml


- name: delete-opsman-vm-only
  serial: true
  serial_groups:
  - serial-jobs
  build_log_retention:
    days: 2
    builds: 1000
  plan:
  - in_parallel:
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
    - get: opsman-vm-state
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    # - task: export-installation-locally
    #   image: platform-automation-image
    #   file: platform-automation-tasks/tasks/export-installation.yml
    #   input_mapping:
    #     env: pipelines
    #   params:
    #     ENV_FILE: foundations/((foundation))/opsman/env.yml
    #     INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
    # - put: opsman-backup-bucket
    #   params:
    #     file: installation/((foundation))-installation*.zip
    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: pipelines
        state: opsman-vm-state
        vars: pipelines
      params:
        OPSMAN_CONFIG_FILE: foundations/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/foundations/((foundation))/vars/opsman.yml
        STATE_FILE: foundations/((foundation))/opsman/state.yml
      ensure:
        <<: *make-commit-opsman-state_and_put

- name: delete-installation-from-opsman
  serial: true
  disable_manual_trigger: true
  serial_groups:
  - serial-jobs
  build_log_retention: null
  plan:
  - in_parallel:
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:
    - task: prepare-tasks-with-opsman-secrets
      <<: *prepare-tasks-with-opsman-secrets
    - task: export-installation-locally
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
    - put: opsman-backup-bucket
      params:
        file: installation/((foundation))-installation*.zip
    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        env: pipelines
      params:
        ENV_FILE: foundations/((foundation))/opsman/env.yml


