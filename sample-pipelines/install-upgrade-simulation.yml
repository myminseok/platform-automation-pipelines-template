resource_types:
- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:

## used for manual trigger serial jobs using version control manually.
- name: pipeline-trigger-version-git
  type: semver
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master # should create this branch inadvance
    file: configs/((foundation))/pipeline-trigger-version # will create if not exists
    private_key:  ((git.private_key))

## for git push
- name: git-image
  type: docker-image
  source: {repository: bitnami/git}

- name: platform_automation_pipelines
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: master
    skip_ssl_verification: true  

- name: platform_automation_configs
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: master
    skip_ssl_verification: true  

- name: opsman_vm_state
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: master
    skip_ssl_verification: true
    paths: [ "configs/((foundation))/state/state.yml" ]


## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: opsman-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"

- name: tas-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.tas
    version_path: products.tas.product-version
    version_pattern: "m.n.p"


- name: service-a-1-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.service-a-1
    version_path: products.service-a-1.product-version
    version_pattern: "m.n.p"

- name: service-a-2-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.service-a-2
    version_path: products.service-a-2.product-version
    version_pattern: "m.n.p"

- name: service-b-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.service-b
    version_path: products.service-b.product-version
    version_pattern: "m.n.p"

credhub_interpolate: &credhub_interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub_interpolate.yml
  input_mapping:
    files: platform-auto-config
  params:
    CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
    CREDHUB_SECRET: ((credhub_client.password))
    CREDHUB_CLIENT: ((credhub_client.username))
    CREDHUB_SERVER: ((credhub_server))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: ((foundation))/configs ((foundation))/vars
    SKIP_MISSING: false


## used for injecting params to tasks in 'semver-config' reource type.
prepare_tasks_with_secrets: &prepare_tasks_with_secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare_tasks_with_secrets.yml
  params:
    CONFIG_PATHS: config # semver-config.yml path.
  output_mapping:
    tasks: platform-automation-tasks


jobs:

- name: install-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: {bump: minor}
    - get: git-image
    - get: platform_automation_pipelines
    - get: platform_automation_configs
    - get: opsman-version-git

  - do:    
    - task: create-vm
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform_automation_pipelines
        - name: platform_automation_configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo "create-vm done" > generated-state/state.yml
            date >> generated-state/state.yml
      ensure:
        do:
          - task: make-commit
            image: git-image
            file: platform_automation_pipelines/tasks/make-git-commit.yml
            input_mapping:
              platform-automation-tasks: platform_automation_pipelines
              repository: platform_automation_configs
              file-source: generated-state
            output_mapping:
              repository-commit: config-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: configs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: "user@test.io"
              GIT_AUTHOR_NAME: "Platform Automation Toolkit Bot"
              COMMIT_MESSAGE: '[Platform Automation] Update state file'
          - put: platform_automation_configs
            params:
              repository: config-commit
              merge: true
    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version}

- name: upgrade-opsman
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: {bump: patch}
    - get: git-image
    - get: platform_automation_pipelines
    - get: platform_automation_configs
    - get: opsman-version-git

  - do:    
    - task: recreate-vm
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform_automation_pipelines
        - name: platform_automation_configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo "date upgrade opsman-vm done " > generated-state/state.yml
            date >> generated-state/state.yml
      ensure:
        do:
          - task: make-commit
            image: git-image
            file: platform_automation_pipelines/tasks/make-git-commit.yml
            input_mapping:
              platform-automation-tasks: platform_automation_pipelines
              repository: platform_automation_configs
              file-source: generated-state
            output_mapping:
              repository-commit: config-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: configs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: "user@test.io"
              GIT_AUTHOR_NAME: "Platform Automation Toolkit Bot"
              COMMIT_MESSAGE: '[Platform Automation] upgrade state file'
          - put: platform_automation_configs
            params:
              repository: config-commit
              merge: true
    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version} ## the filename is always 'version'

- name: install-and-patch-tas
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
    - get: platform_automation_configs
    - get: tas-version-git
    - get: opsman_vm_state ## this is for trigger in case of 'install-opsman' or 'upgrade-opsman'
    #  trigger: true

  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform_automation_configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo "upgrade tas done" 
      


- name: install-and-patch-service-a-1
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform_automation_configs
    - get: service-a-1-version-git

  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform_automation_configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo " done" 
      

- name: install-and-patch-service-a-2
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-service-a-1 ]
    - get: platform_automation_configs
    - get: service-a-2-version-git

  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform_automation_configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo " done" 
      

- name: install-and-patch-service-b
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform_automation_configs
    - get: service-b-version-git
   
  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform_automation_configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo " done" 
      
