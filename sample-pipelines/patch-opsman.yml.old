resource_types:
# A custom Concourse Resource type for detecting Semver-based config
# Ref: https://github.com/brightzheng100/semver-config-concourse-resource
- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:
- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.platform_automation))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.platform_automation))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true


- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: installation-((foundation))
    regexp: ((foundation))-installation-(.*).zip
    skip_ssl_verification: true

## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: product-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.configuration.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: ((foundation))/products/version.yml
    ## key to identify product section in 'version.yml'
    config_path: products.opsman
    ## to track version by semver-config
    version_path: products.opsman.product-version
    ## care only patch version chage.
    version_pattern: "*.*.p"


# configurations
- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    branch: master

- name: variable
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.variable.uri))
    branch: master


# reusable stuff
credhub_interpolate: &credhub_interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub_interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATHS: ((foundation))/opsman ((foundation))/vars
    SKIP_MISSING: false



groups:
- name: patch-opsman
  jobs:
  - replace-opsman-vm
  - apply-director-changes
  - export-installation
  - generate-director-config

jobs:
- name: replace-opsman-vm
  serial: true
  serial_groups: [ opsman ]
  plan:
    - in_parallel:
        - get: product-version-git
          trigger: true
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: installation
        - get: configuration
        - get: variable

    - task: credhub_interpolate
      <<: *credhub_interpolate

    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: interpolated-files
      params:
        ENV_FILE: ((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
    - put: installation
      params:
        file: installation/((foundation))-installation*.zip

    ## ova file.
    - task: download-product-from-s3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      input_mapping:
        ## semver-config output semver-config.yml to be use as a input of download-product.yml
        ## semver-config.yaml is output of 'product-version-git' task.
        ## will find a folder name of '[pivnet-product-slug, product-version]' in s3 bucket.
        ## will find a file name 'pivnet-product-slug, product-version, pivnet-file-glob' under the folder. 
        ## stemcell slug will come from meta in product file.
        ## ex) https://s3/pivnet-products/[opsmanager,2.6.3]/ops-manager-vsphere-2.6.3-build.163.ova
        config: product-version-git
        ## will provide additional params for semver-config.yaml
        vars: interpolated-files
      params:
        CONFIG_FILE: semver-config.yaml
        VARS_FILES: vars/((foundation))/vars/global.yml
              

    ## requires "old opsman is running"
    - task: upgrade-opsman-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: downloaded-product
        state: configuration
        config: interpolated-files
        env: interpolated-files
        vars: variable
      params:
        #VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
        ENV_FILE: ((foundation))/opsman/env.yml
        OPSMAN_CONFIG_FILE: ((foundation))/products/ops-manager.yml
        STATE_FILE: ((foundation))/state/state.yml
        INSTALLATION_FILE: ((foundation))-installation*.zip
      on_success: &make-state-commit
        do:
          - task: make-commit
            image: platform-automation-image
            file: platform-automation-tasks/tasks/make-git-commit.yml
            input_mapping:
              repository: configuration
              file-source: generated-state
            output_mapping:
              repository-commit: configuration-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: ((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: 'Update state file from upgrade-opsman pipeline'
          - put: configuration
            params:
              repository: configuration-commit
              merge: true


- name: apply-director-changes
  serial: true
  plan:
  - in_parallel:
    - get: product-version-git
      passed: [replace-opsman-vm]
      trigger: true
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub_interpolate
    <<: *credhub_interpolate
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files 
    params:
      ENV_FILE: ((foundation))/opsman/env.yml


- name: export-installation
  serial: false
  plan:
  - in_parallel:
    - get: product-version-git
      passed: [apply-director-changes]
      trigger: true
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub_interpolate
    <<: *credhub_interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files 
    params:
      ENV_FILE: ((foundation))/opsman/env.yml
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  - put: installation
    params:
      file: installation/((foundation))-installation*.zip

- name: generate-director-config
  serial: false
  plan:
  - in_parallel:
    - get: product-version-git
      passed: [ apply-director-changes ]
      trigger: true
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub_interpolate
    <<: *credhub_interpolate
  - task: staged-director-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: interpolated-files 
    params:
      ENV_FILE: ((foundation))/opsman/env.yml
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: director.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/director.yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: director.yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true



