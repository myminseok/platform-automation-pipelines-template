#@ def credhub_interpolate():
task: credhub_interpolate
image: platform-automation-image
##file: platform-automation-tasks/tasks/credhub-interpolate.yml
file: pipelines/tasks/credhub-interpolate.yml
input_mapping:
  files: configuration
params:
  CREDHUB_CA_CERT: ((credhub.ca_cert))
  CREDHUB_SECRET: ((credhub_client.password))
  CREDHUB_CLIENT: ((credhub_client.username))
  CREDHUB_SERVER: ((credhub.server))
  PREFIX: /concourse/main
  INTERPOLATION_PATHS: envs/((foundation))
  SKIP_MISSING: false
#@ end

#@ def prepare_tasks_with_secrets():
task: prepare_tasks_with_secrets
image: platform-automation-image
file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
input_mapping:
  tasks: platform-automation-tasks
  config: configuration
  vars: configuration
params:
  CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
  VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
output_mapping:
  tasks: platform-automation-tasks
#@ end

#@ def prepare_tasks_with_product_version():
task: prepare_tasks_with_product_version
image: platform-automation-image
file: pipelines/tasks/prepare-tasks-with-secrets.yml
input_mapping:
  tasks: platform-automation-tasks
  config: opsman-version-git
  vars: configuration
params:
  CONFIG_PATHS: config
  VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
output_mapping:
  tasks: platform-automation-tasks
#@ end

#@ def prepare_custom_tasks_with_secrets():
task: prepare_custom_tasks_with_secrets
image: platform-automation-image
file: pipelines/tasks/prepare-tasks-with-secrets.yml
input_mapping:
  tasks: pipelines
  config: configuration
  vars: configuration
params:
  CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
  VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
  TASKS_PATH: tasks/tasks
output_mapping:
  tasks: pipelines
#@ end

#@ def prepare_custom_tasks_with_product_version():
task: prepare_custom_tasks_with_product_version
image: platform-automation-image
file: pipelines/tasks/prepare-tasks-with-secrets.yml
input_mapping:
  tasks: pipelines
  vars: configuration
  config: opsman-version-git
params:
  CONFIG_PATHS: config
  VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
  TASKS_PATH: tasks/tasks
output_mapping:
  tasks: pipelines
#@ end


#@ def opsman_state_make_commit():
task: opsman_state_make_commit
image: platform-automation-image
file: platform-automation-tasks/tasks/make-git-commit.yml
input_mapping:
  repository: configuration
  file-source: generated-state
output_mapping:
  repository-commit: configuration-commit
params:
  FILE_SOURCE_PATH: state.yml
  FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
  GIT_AUTHOR_EMAIL: ((git.user.email))
  GIT_AUTHOR_NAME: ((git.user.username))
  COMMIT_MESSAGE: "Update from upgrade-opsman"
#@ end

#@ def put_opsman_state():
put: configuration
params:
  repository: configuration-commit
  merge: true
#@ end


#@ def stage_configure_apply():
task: stage_configure_apply
image: platform-automation-image
file: platform-automation-tasks/tasks/stage-configure-apply.yml
input_mapping:
  product: downloaded-product
  env: configuration
  config: configuration
params:
  ENV_FILE: envs/((foundation))/opsman/env.yml
#@ end


#@ def echo_files(files, FILE):
task: echo_files
config:
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: ubuntu
  inputs:
  - name: files
  params:
    FILE:
  run:
    path: bash
    args:
    - -exc
    - |
      cat $FILE
#@ end

jobs:

#@ def opsman_jobs():



- name: bootstrap-domain-certificate
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:
    - #@ prepare_custom_tasks_with_secrets()

    - task: generate-domain-certificate
      file: pipelines/tasks/generate-certificate.yml
      input_mapping:
        config: configuration
      params:
        AWS_ACCESS_KEY_ID: ((certificate.generate.dns_privider_access_key))
        AWS_SECRET_ACCESS_KEY: ((certificate.generate.dns_privider_access_secret_key))
        AWS_REGION: ((certificate.generate.dns_provider_region))
        SUBDOMAIN: ((certificate.generate.subdomain))
        AWS_HOSTED_ZONE_ID:  ((certificate.generate.dns_provider_hosted_zone_id))
        EMAIL: ((certificate.generate.letsencrypt_email))

    - put: domain_certificate
      params:
        file: installation/certificate_((certificate.generate.subdomain))_*.tgz

    - task: save-certificate-to-credhub
      file: pipelines/tasks/save-certificate-to-credhub.yml
      input_mapping:
        config: configuration
      params:
        CERTIFICATE_FILE: generated-certificate/certificates*.tgz
        SUBDOMAIN: ((certificate.generate.subdomain))
        CREDHUB_CA_CERT: ((credhub.ca_cert))
        CREDHUB_SECRET: ((credhub_client.password))
        CREDHUB_CLIENT: ((credhub_client.username))
        CREDHUB_SERVER: ((credhub.server))
        PIPELINE_NAME: ((BUILD_PIPELINE_NAME))
        PREFIX: /concourse/main
        KEY_NAME: ((certificate.credhub_key_name))




- name: install-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:

    - #@ prepare_tasks_with_secrets()

    - #@ prepare_tasks_with_product_version()

    - #@ prepare_custom_tasks_with_secrets()

    - #@ prepare_custom_tasks_with_product_version()

    - task: echo_files
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ubuntu
        inputs:
        - name: platform-automation-tasks
        params:
          FILE: platform-automation-tasks/tasks/download-product.yml
        run:
          path: bash
          args:
          - -exc
          - |
            cat $FILE

    - task: check-opsman-state-file
      image: platform-automation-image
      file: pipelines/tasks/check-opsman-state-file.yml
      input_mapping:
        config: configuration
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml


    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git
        vars: configuration
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml from 'opsman-version-git' resource.
        VARS_FILES: vars/envs/((foundation))/vars/versions.yml

    ## if VM already exists, not attempting to create it, and return true.
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: downloaded-product 
        config: configuration # for products/ops-manager.yml
        vars: configuration
        state: configuration # git repo, have to provide empty state.yml file. 'interpolated-files' doesn't have state.yml file.
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml
      on_success:
        do:
          - #@ opsman_state_make_commit()
          - #@ put_opsman_state()
        

- name: configure-opsman-authentication
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [install-opsman]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - #@ prepare_tasks_with_secrets()

    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      attempts: 10
      input_mapping:
        env: configuration
        config: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        AUTH_CONFIG_FILE: envs/((foundation))/opsman/auth.yml

- name: configure-director
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [configure-opsman-authentication]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - #@ prepare_tasks_with_secrets()

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: configuration
        config: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: envs/((foundation))/opsman/director.yml
        VARS_FILES: vars/envs/((foundation))/vars/director.yml


- name: configure-director-only
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
     # passed: [configure-opsman-authentication]
     # trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - #@ prepare_tasks_with_secrets()

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: configuration
        config: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: envs/((foundation))/opsman/director.yml
        VARS_FILES: vars/envs/((foundation))/vars/director.yml



## for aws LB setting.
- name: opsman-custom-vm-extensions
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [ configure-director ]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:

    - #@ prepare_tasks_with_secrets()

    - #@ prepare_custom_tasks_with_secrets()

    #for cloud such aws
    - task: opsman-custom-vm-extensions-for-lb-security-groups
      image: platform-automation-image
      file: pipelines/tasks/opsman-custom-vm-extensions.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml


- name: apply-director-changes
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: { bump: patch }
      passed: [ opsman-custom-vm-extensions ]
      #trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:
    - #@ prepare_tasks_with_secrets()

    - #@ prepare_custom_tasks_with_secrets()

    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml

    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version}



- name: upgrade-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - #@ prepare_tasks_with_secrets()

    - #@ prepare_custom_tasks_with_product_version()

    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.

    # will be used in upgrade-opsman task.
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip

    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: downloaded-product 
        state: configuration
        config: configuration # for products/ops-manager.yml
        env: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        STATE_FILE: envs/((foundation))/state/state.yml
        INSTALLATION_FILE: envs/((foundation))-installation*.zip
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
      ensure:
        do:
          - #@ opsman_state_make_commit()
          - #@ put_opsman_state()


- name: export-installation
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - #@ prepare_tasks_with_secrets()

    - #@ prepare_custom_tasks_with_product_version()

    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip

    - put: installation
      params:
        file: installation/((foundation))-installation*.zip

- name: extract-director-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ apply-director-changes ]

    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    

    - #@ prepare_custom_tasks_with_secrets()

    - task: staged-config
      image: platform-automation-image
      file: pipelines/tasks/staged-director-config.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false

- name: bbr-backup-director
  serial: true
  serial_groups: [ bbr-backup ]
  plan:
  - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: pipelines
      - get: configuration
      - get: bbr-release-pivnet
        params:
          globs: [ "bbr-*-linux-*"]
  - do:
      - #@ prepare_custom_tasks_with_secrets()

      - task: bbr-cleanup
        file: pipelines/tasks/bbr-cleanup-director.yml
        input_mapping:
          bbr-release: bbr-release-pivnets
          config: configuration
        params:
          ENV_FILE: envs/((foundation))/opsman/env.yml

      - task: bbr-backup
        file: pipelines/tasks/bbr-backup-director.yml
        input_mapping:
          bbr-release: bbr-release-pivnet
          config: configuration
        params:
          ENV_FILE: envs/((foundation))/opsman/env.yml
          FOUNDATION: ((foundation))
        on_failure:
          task: bbr-cleanup
          file: pipelines/tasks/bbr-cleanup-director.yml
          input_mapping:
            bbr-release: bbr-release-pivnets
            config: configuration
          params:
            ENV_FILE: envs/((foundation))/opsman/env.yml
      - put: bbr-director-backup-bucket
        params:
          file: backup-artifact/((foundation))-director-backup_*.tgz



- name: delete-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - #@ prepare_tasks_with_secrets()

    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: configuration
        state: opsman_vm_state
        vars: configuration
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml
      ensure:
        do:
          - #@ opsman_state_make_commit()
          - #@ put_opsman_state()


- name: delete-installation-from-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration

  - do:
    - #@ prepare_tasks_with_secrets()

    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        config: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
#@ end