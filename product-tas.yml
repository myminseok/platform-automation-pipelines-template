
- name: tas-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    private_key: ((git.private_key))
    config_file: envs/((foundation))/versions.yml
    config_path: products.tas
    version_path: products.tas.product-version
    version_pattern: "m.n.p"


credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_SECRET: ((credhub_client.password))
    CREDHUB_CLIENT: ((credhub_client.username))
    CREDHUB_SERVER: ((credhub.server))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: envs/((foundation))
    SKIP_MISSING: false


prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
    VARS_PATHS: config/envs/((foundation))/generated-vars config/envs/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks

## injects params from 'semver-config.yaml' to task files
prepare-custom-tasks-with-product-version: &prepare-custom-tasks-with-product-version
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    vars: configuration
    config: opsman-version-git 
  params:
    CONFIG_PATHS: config # semver-config-resource auto-generates folder for semver-config.yml.
    VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
    TASKS_PATH: tasks/tasks # only for pipelines tasks

prepare-custom-tasks-with-secrets: &prepare-custom-tasks-with-secrets
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
    VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
    TASKS_PATH: tasks/tasks
  output_mapping:
    tasks: pipelines


opsman-state-make-commit: &opsman-state-make-commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: configuration
    file-source: generated-state
  output_mapping:
    repository-commit: configuration-commit
  params:
    FILE_SOURCE_PATH: state.yml
    FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
    GIT_AUTHOR_EMAIL: ((git.user.email))
    GIT_AUTHOR_NAME: ((git.user.username))
    COMMIT_MESSAGE: "Update from upgrade-opsman"

download-product: &download-product
  image: platform-automation-image
  file: platform-automation-tasks/tasks/download-product.yml
  input_mapping:
   # config: tas-version-git  
    vars: configuration
  params:
    CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.
    #VARS_FILES: vars/((foundation))/vars/tas.yml         

upload-product: &upload-product
  image: platform-automation-image
  file: platform-automation-tasks/tasks/upload-product.yml
  input_mapping:
    product: downloaded-product
    env: configuration
  params:
    ENV_FILE: envs/((foundation))/opsman/env.yml

upload-stemcell: &upload-stemcell
  image: platform-automation-image
  file: platform-automation-tasks/tasks/upload-stemcell.yml
  input_mapping:
    stemcell: downloaded-stemcell
    env: configuration
  params:
    ENV_FILE: envs/((foundation))/opsman/env.yml
    FLOATING_STEMCELL: false
    
stage-configure-apply: &stage-configure-apply
  image: platform-automation-image
  file: platform-automation-tasks/tasks/stage-configure-apply.yml
  input_mapping:
    product: downloaded-product
    env: configuration
    config: configuration
  params:
    #CONFIG_FILE: envs/((foundation))/products/tas.yml
    ENV_FILE: envs/((foundation))/opsman/env.yml
    #VARS_FILES: config/envs/((foundation))/vars/tas.yml

configure-product: &configure-product
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-product.yml
  input_mapping:
    config: configuration
    env: configuration
    vars: configuration
  params:
    ENV_FILE: envs/((foundation))/opsman/env.yml
    #CONFIG_FILE: envs/((foundation))/products/tas.yml
    #VARS_FILES: vars/envs/((foundation))/vars/tas.yml


apply-product-changes: &apply-product-changes
  image: platform-automation-image
  file: pipelines/tasks/apply-product-changes.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: ((foundation))/opsman/env.yml

echo-files: &echo-files
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: ubuntu
    inputs:
    - name: generated-config
    params:
      FILE: 
    run:
      path: bash
      args:
      - -exc
      - |
        cat $FILE
        Build Name: ${BUILD_PIPELINE_NAME}



staged-config: &staged-config
  image: platform-automation-image
  file: pipelines/tasks/staged-director-config.yml
  input_mapping:
    config: configuration
    env: configuration
    vars: configuration
  params:
    ENV_FILE: envs/((foundation))/opsman/env.yml
    SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    #PRODUCT_NAME: cf



jobs:

#################################################################


- name: fetch-platform-automation-from-pivnet
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention: 
    days: 2
    builds: 100

  plan:
    - get: platform-automation-pivnet
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/platform-automation-tasks-*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/platform-automation-image-*.tgz


- name: delete-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: configuration
        state: opsman_vm_state
        vars: configuration
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml
      ensure: 
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from "
          - put: configuration
            params:
              repository: configuration-commit
              merge: true


- name: delete-installation-from-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        config: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml

#################################################################

- name: bootstrap-terraform-state-to-credhub
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: save-terraform-state-to-credhub
      file: pipelines/tasks/prepare-credhub-secrets-from-terraform-state.yml
      input_mapping:
        config: configuration
      params:
        #CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
        CREDHUB_CA_CERT: ""
        CREDHUB_SECRET: ((credhub_client.password))
        CREDHUB_CLIENT: ((credhub_client.username))
        CREDHUB_SERVER: ((credhub.server))
        TERRAFORM_STATE_FILE_PATH: config/envs/((foundation))/terraform.tfstate
        PREFIX: /concourse/main
        PIPELINE_NAME: ((BUILD_PIPELINE_NAME))
        SHELL_FILE: config/envs/((foundation))/pipeline-vars/pipeline-vars/set-credhub-from-terraform.sh


- name: bootstrap-certificate-to-credhub
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:
    - task: generate-domain-certificate
      file: pipelines/tasks/generate-ceertificate.yml
      input_mapping:
        config: configuration
      params:
        AWS_ACCESS_KEY_ID: ((certificate.generate.dns_privider_access_key))
        AWS_SECRET_ACCESS_KEY: ((certificate.generate.dns_privider_access_secret_key))
        AWS_REGION: ((certificate.generate.dns_provider_region))
        SUBDOMAIN: ((certificate.generate.subdomain))
        AWS_HOSTED_ZONE_ID:  ((certificate.generate.hosted_zone_id))
        EMAIL: ((certificate.generate.letsencrypt_email))

    - task: save-certificate-to-credhub
      file: pipelines/tasks/save-certificate-to-credhub.yml
      input_mapping:
        config: configuration
      params:
        CERTIFICATE_FILE: generated-certificate/certificates.tgz
        SUBDOMAIN: ((certificate.generate.subdomain))
        #CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
        CREDHUB_CA_CERT: ""
        CREDHUB_SECRET: ((credhub_client.password))
        CREDHUB_CLIENT: ((credhub_client.username))
        CREDHUB_SERVER: ((credhub.server))
        PIPELINE_NAME: ((BUILD_PIPELINE_NAME))
        PREFIX: /concourse/main
        KEY_NAME: ((certificate.credhub_key_name))


#################################################################

- name: install-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        config: opsman-version-git 
        vars: configuration

    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.

    ## if VM already exists, not attempting to create it, and return true.
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: downloaded-product 
        config: configuration # for products/ops-manager.yml
        vars: configuration
        state: configuration # git repo, have to provide empty state.yml file. 'interpolated-files' doesn't have state.yml file.
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml
      on_success:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from  create-vm job"
          - put: configuration
            params:
              repository: configuration-commit
              merge: true

- name: configure-opsman-authentication
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [install-opsman]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      attempts: 10
      input_mapping:
        env: configuration
        config: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        AUTH_CONFIG_FILE: envs/((foundation))/opsman/auth.yml

- name: configure-director
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [configure-opsman-authentication]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: configuration
        config: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: envs/((foundation))/opsman/director.yml
        VARS_FILES: vars/envs/((foundation))/vars/director.yml


- name: configure-director-only
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
     # passed: [configure-opsman-authentication]
     # trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: configuration
        config: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: envs/((foundation))/opsman/director.yml
        VARS_FILES: vars/envs/((foundation))/vars/director.yml



## for aws LB setting.
- name: opsman-custom-vm-extensions
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [ configure-director ]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    #for cloud such aws
    - task: opsman-custom-vm-extensions-for-lb-security-groups
      image: platform-automation-image
      file: pipelines/tasks/opsman-custom-vm-extensions.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml


- name: apply-director-changes
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: { bump: patch }
      passed: [ opsman-custom-vm-extensions ]
      #trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml

    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version}


##################################################################


- name: install-and-patch-tas
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: tas-version-git

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        config: tas-version-git
        vars: configuration

    - task: download-product
      <<: *download-product
      input_mapping:
        config: tas-version-git  
        vars: configuration
      params:
        CONFIG_FILE: semver-config.yaml
        VARS_FILES: vars/envs/((foundation))/vars/tas.yml         
    
    - task: upload-product
      <<: *upload-product

    - task: upload-stemcell
      <<: *upload-stemcell

    - task: stage-configure-apply
      <<: *stage-configure-apply
      params:
        CONFIG_FILE: envs/((foundation))/products/tas.yml
        ENV_FILE: envs/((foundation))/opsman/env.yml
        VARS_FILES: config/envs/((foundation))/generated-vars/tas.yml config/envs/((foundation))/vars/tas.yml


- name: configure-tas-only
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: configure-product
      <<: *configure-product
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        CONFIG_FILE: envs/((foundation))/products/tas.yml
        VARS_FILES: config/envs/((foundation))/generated-vars/tas.yml config/envs/((foundation))/vars/tas.yml

        
- name: apply-change-tas
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [configure-tas-only]
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: configure-product
      <<: *configure-product
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        CONFIG_FILE: envs/((foundation))/products/tas.yml
        VARS_FILES: vars/envs/((foundation))/vars/tas.yml
        
    - task: apply-product-changes
      <<: *apply-product-changes
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        PRODUCT_NAME: cf



- name: install-and-patch-scs
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: scs-version-git

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: download-product
      <<: *download-product
      input_mapping:
        config: scs-version-git  
        vars: configuration
      params:
        CONFIG_FILE: semver-config.yaml
        #VARS_FILES: vars/envs/((foundation))/vars/scs.yml         
    
    - task: upload-product
      <<: *upload-product

    - task: upload-stemcell
      <<: *upload-stemcell

    - task: stage-configure-apply
      <<: *stage-configure-apply
      params:
        CONFIG_FILE: envs/((foundation))/products/scs.yml
        ENV_FILE: envs/((foundation))/opsman/env.yml
        #VARS_FILES: config/envs/((foundation))/vars/scs.yml


- name: configure-scs
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: configure-product
      <<: *configure-product
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        CONFIG_FILE: envs/((foundation))/products/scs.yml
        VARS_FILES: vars/envs/((foundation))/vars/scs.yml
        

- name: install-and-patch-redis
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: redis-version-git

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: download-product
      <<: *download-product
      input_mapping:
        config: redis-version-git  
        vars: configuration
      params:
        CONFIG_FILE: semver-config.yaml
        #VARS_FILES: vars/envs/((foundation))/vars/redis.yml         
    
    - task: upload-product
      <<: *upload-product

    - task: upload-stemcell
      <<: *upload-stemcell

    - task: stage-configure-apply
      <<: *stage-configure-apply
      params:
        CONFIG_FILE: envs/((foundation))/products/redis.yml
        ENV_FILE: envs/((foundation))/opsman/env.yml
        #VARS_FILES: config/envs/((foundation))/vars/redis.yml



- name: configure-redis
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: configure-product
      <<: *configure-product
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        CONFIG_FILE: envs/((foundation))/products/redis.yml
        VARS_FILES: vars/envs/((foundation))/vars/redis.yml
        


- name: install-and-patch-rabbitmq
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: rabbitmq-version-git

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: download-product
      <<: *download-product
      input_mapping:
        config: rabbitmq-version-git  
        vars: configuration
      params:
        CONFIG_FILE: semver-config.yaml
        #VARS_FILES: vars/envs/((foundation))/vars/rabbitmq.yml         
    
    - task: upload-product
      <<: *upload-product

    - task: upload-stemcell
      <<: *upload-stemcell

    - task: stage-configure-apply
      <<: *stage-configure-apply
      params:
        CONFIG_FILE: envs/((foundation))/products/rabbitmq.yml
        ENV_FILE: envs/((foundation))/opsman/env.yml
        #VARS_FILES: config/envs/((foundation))/vars/rabbitmq.yml


- name: upgrade-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        config: opsman-version-git
        vars: configuration

    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.

    # will be used in upgrade-opsman task.
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip

    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: downloaded-product 
        state: configuration
        config: configuration # for products/ops-manager.yml
        env: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        STATE_FILE: envs/((foundation))/state/state.yml
        INSTALLATION_FILE: envs/((foundation))-installation*.zip
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
      ensure:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from upgrade-opsman"
          - put: configuration
            params:
              repository: configuration-commit
              merge: true


- name: export-installation
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        config: opsman-version-git 
        vars: configuration

    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip

    - put: installation
      params:
        file: installation/((foundation))-installation*.zip

################################################################

- name: extract-director-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ apply-director-changes ]

    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: staged-config
      image: platform-automation-image
      file: pipelines/tasks/staged-director-config.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    - task: check
      <<: *echo-files
      input_mapping:
        generated-config: generated-config
      params:
        FILE: generated-config/*.yml

- name: extract-tas-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: staged-config
      <<: *staged-config
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        PRODUCT_NAME: cf
        SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    - task: check
      <<: *echo-files
      input_mapping:
        generated-config: generated-config
      params:
        FILE: generated-config/*.yml

- name: extract-scs-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-scs ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: staged-config
      <<: *staged-config
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        PRODUCT_NAME: cf
        SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    - task: check
      <<: *echo-files
      input_mapping:
        generated-config: generated-config
      params:
        FILE: generated-config/*.yml



- name: bbr-backup-director
  serial: true
  serial_groups: [ bbr-backup ]
  plan:
  - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: pipelines
      - get: configuration
      - get: bbr-release-pivnet
        params:
          globs: [ "bbr-*-linux-*"]
  - do:
      - task: prepare-custom-tasks-with-secrets
        <<: *prepare-custom-tasks-with-secrets

      - task: bbr-backup
        file: pipelines/tasks/bbr-backup-director.yml
        input_mapping:
          bbr-release: bbr-release-pivnet
          config: configuration
        params:
          ENV_FILE: envs/((foundation))/opsman/env.yml
          FOUNDATION: ((foundation))
        on_failure:
          task: bbr-cleanup
          file: pipelines/tasks/bbr-cleanup-director.yml
          input_mapping:
            bbr-release: bbr-release-pivnets
            config: configuration
          params:
            ENV_FILE: envs/((foundation))/opsman/env.yml
      - put: bbr-director-backup-bucket
        params:
          file: backup-artifact/((foundation))-director-backup_*.tgz

- name: bbr-backup-tas
  serial: true
  serial_groups: [ bbr-backup ]
  plan:
  - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: pipelines
      - get: configuration
      - get: bbr-release-pivnet
        params:
          globs: [ "bbr-*-linux-*"]
  - do:
      - task: prepare-custom-tasks-with-secrets
        <<: *prepare-custom-tasks-with-secrets

      - task: bbr-backup
        file: pipelines/tasks/bbr-backup-product.yml
        input_mapping:
          bbr-release: bbr-release-pivnet
          config: configuration
        params:
          ENV_FILE: envs/((foundation))/opsman/env.yml
          FOUNDATION: ((foundation))
          PRODUCT_NAME: cf
        on_failure:
          task: bbr-cleanup
          file: pipelines/tasks/bbr-cleanup-product.yml
          input_mapping:
            bbr-release: bbr-release-pivnet
            config: configuration
          params:
            ENV_FILE: envs/((foundation))/opsman/env.yml
            PRODUCT_NAME: cf
      - put: bbr-tas-backup-bucket
        params:
          file: backup-artifact/((foundation))-cf-backup_*.tgz



- name: bbr-backup-director-via-ssh
  serial: true
  serial_groups: [ bbr-backup ]
  plan:
  - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: pipelines
      - get: configuration
      - get: bbr-release-pivnet
        params:
          globs: [ "bbr-*-linux-*"]
  - do:
      - task: prepare-custom-tasks-with-secrets
        <<: *prepare-custom-tasks-with-secrets

      ## only for env.yml
      - task: credhub-interpolate-for-env-yml
        image: platform-automation-image
        file: pipelines/tasks/credhub-interpolate.yml
        input_mapping:
          files: configuration
        params:
          #CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
          CREDHUB_CA_CERT: ""
          CREDHUB_SECRET: ((credhub_client.password))
          CREDHUB_CLIENT: ((credhub_client.username))
          CREDHUB_SERVER: ((credhub.server))
          PREFIX: /concourse/main/((BUILD_PIPELINE_NAME))
          INTERPOLATION_PATHS: envs/((foundation))/opsman
          SKIP_MISSING: true


      - task: bbr-backup-ssh
        file: pipelines/tasks/bbr-backup-director-ssh.yml
        input_mapping:
          bbr-release: bbr-release-pivnet
          config: interpolated-files
        params:
          ENV_FILE: envs/((foundation))/opsman/env.yml
          FOUNDATION: envs/((foundation))
          SSH_ENABLED: ((bbr.backup.ssh.enabled))
          SSH_HOST: ((bbr.backup.ssh.host))
          SSH_USERNAME: ((bbr.backup.ssh.username))
          SSH_PRIVATEE_KEY: ((git_private_key.private_key))
       


- name: test
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git

  - do:


    - task: test
      config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ubuntu
          params:
            FILE: 
            WORLD_PARAM: ((opsman_ssh_key.public_key))
          run:
            path: bash
            args:
            - -exc
            - |
              echo "hi"
              echo "$WORLD_PARAM"
              
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        vars: configuration
        config: opsman-version-git
        
         

groups:

  - name: main
    jobs:
    - bootstrap-terraform-state-to-credhub
    - bootstrap-certificate-to-credhub
    - install-opsman
    - configure-opsman-authentication
    - opsman-custom-vm-extensions
    - configure-director
    - apply-director-changes
    - export-installation
    - upgrade-opsman
    - install-and-patch-tas
    - install-and-patch-scs
    - install-and-patch-redis
    - install-and-patch-rabbitmq

  #configure-product-manually
    - apply-change-tas
    - configure-tas-only
    - configure-director-only
    - configure-scs
    - configure-redis

  #extract-product-config-manually
    - extract-director-config
    - extract-tas-config
    - extract-scs-config

  #backup
    - bbr-backup-director
    - bbr-backup-tas
    - export-installation
    - bbr-backup-director-via-ssh

  #delete-manually
    - delete-installation-from-opsman
    - delete-opsman

  #etc
    - fetch-platform-automation-from-pivnet
    - test


  - name: install-upgrade
    jobs:
    - bootstrap-terraform-state-to-credhub
    - bootstrap-certificate-to-credhub
    - install-opsman
    - configure-opsman-authentication
    - opsman-custom-vm-extensions
    - configure-director
    - apply-director-changes
    - export-installation
    - upgrade-opsman
    - install-and-patch-tas
    - install-and-patch-scs
    - install-and-patch-redis
    - install-and-patch-rabbitmq

  - name: configure-product-manually
    jobs:
    - apply-change-tas
    - configure-tas-only
    - configure-director-only
    - configure-scs
    - configure-redis

  - name: extract-product-config-manually
    jobs:
    - extract-director-config
    - extract-tas-config
    - extract-scs-config

  - name: backup
    jobs:
    - bbr-backup-director
    - bbr-backup-tas
    - export-installation
    - bbr-backup-director-via-ssh

  - name: delete-manually
    jobs:
    - delete-installation-from-opsman
    - delete-opsman

  - name: etc
    jobs:
    - fetch-platform-automation-from-pivnet
    - test




