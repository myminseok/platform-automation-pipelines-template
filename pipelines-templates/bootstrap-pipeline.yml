## to list up job name list from this file.
## sed -n '/^jobs:/,/^resource_types:/p' ./bootstrap-pipeline.yml | grep  "\- name" | sed 's/- name:/  -/g'

groups:
- name: bootstrap
  jobs:
  - generate-domain-certificate
  - save-domain-certificate-to-credhub

- name: platform-files
  jobs:
  - fetch-platform-automation-files-from-pivnet
  - fetch-opsman-from-pivnet
  - fetch-opsman-vsphere-from-pivnet



resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: notify-slack
  type: docker-image
  source:
    repository: cfcommunity/notify-slack-resource
    tag: latest

resources:
- name: trigger-pipeline-git
  type: semver
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    file: foundations/((foundation))/trigger-pipeline-((pipeline_name))
    initial_version: 0.0.1
    private_key: ((git_private_key.private_key))

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 5\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.platform_files))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.platform_files))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true

- name: pipelines
  type: git
  source:
    private_key: ((git_private_key.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: ((git.platform_automation_pipelines.branch))
    skip_ssl_verification: true

- name: domain-certificate
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.platform_backup))
    regexp: certificate_*_(.*).tgz
    skip_ssl_verification: true

- name: opsman-product
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.platform_files))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: "ops-manager-aws-*(.*).*"
    skip_ssl_verification: true

- name: opsman-vsphere-product
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.platform_files))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: "ops-manager-vsphere-*(.*).*"
    skip_ssl_verification: true

prepare-custom-tasks-with-secrets: &prepare-custom-tasks-with-secrets
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    config: pipelines
    vars: pipelines
  params:
    TASKS_PATH: tasks/tasks
    CONFIG_PATHS: config/foundations/((foundation))/opsman config/foundations/((foundation))/products
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: pipelines

prepare-tasks-with-download-products-secrets: &prepare-tasks-with-download-products-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: pipelines
    vars: pipelines
  params:
    CONFIG_PATHS: config/foundations/((foundation))/download-products
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks

jobs:

- name: fetch-platform-automation-files-from-pivnet
  serial: true
  plan:
    - get: platform-automation-pivnet
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/platform-automation-tasks-*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/platform-automation-image-*.tgz

- name: fetch-opsman-from-pivnet
  serial: true
  plan:
  - in_parallel:
    - get: pipelines
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }

  - task: prepare-tasks-with-download-products-secrets
    <<: *prepare-tasks-with-download-products-secrets

  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping: {config: pipelines }
    params:
      CONFIG_FILE: foundations/((foundation))/download-products/opsman.yml
  - put: opsman-product
    params:
      file: downloaded-product/*


- name: fetch-opsman-vsphere-from-pivnet
  serial: true
  plan:
  - in_parallel:
    - get: pipelines
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }

  - task: prepare-tasks-with-download-products-secrets
    <<: *prepare-tasks-with-download-products-secrets

  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping: {config: pipelines }
    params:
      CONFIG_FILE: foundations/((foundation))/download-products/opsman-vsphere.yml
  - put: opsman-vsphere-product
    params:
      file: downloaded-product/*


- name: generate-domain-certificate
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
  - do:
    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: generate-domain-certificate
      file: pipelines/tasks/generate-certificate.yml
      input_mapping:
        config: pipelines
      params:
        AWS_ACCESS_KEY_ID: ((s3_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((s3_secret_access_key))
        AWS_REGION: ((domain_certificate.generate.dns_provider_region))
        SUBDOMAIN: ((domain_certificate.generate.subdomain))
        AWS_HOSTED_ZONE_ID: ((domain_certificate.generate.dns_provider_hosted_zone_id))
        EMAIL: ((domain_certificate.generate.letsencrypt_email))
    - put: domain-certificate
      params:
        file: generated-certificate/certificate_((domain_certificate.generate.subdomain))_*.tgz

- name: save-domain-certificate-to-credhub
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      params: { unpack: true }
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: pipelines
    - get: domain-certificate
  - do:
    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets
    - task: save-to-credhub
      image: platform-automation-image
      file: pipelines/tasks/save-certificate-to-credhub.yml
      input_mapping:
        config: pipelines
        certificate: domain-certificate
      params:
        CERTIFICATE_FILE: certificate/certificate*.tgz
        SUBDOMAIN: ((certificate.generate.subdomain))
        CREDHUB_CA_CERT: ((credhub.ca_cert))
        CREDHUB_SECRET: ((credhub_client.password))
        CREDHUB_CLIENT: ((credhub_client.username))
        CREDHUB_SERVER: ((credhub.server))
        PIPELINE_NAME: ((pipeline_name))
        PREFIX: /concourse/main
        KEY_NAME: ((certificate.credhub_key_name))


